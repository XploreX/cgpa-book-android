# This is a basic workflow to help you get started with Actions

name: Build CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
         java-version: 1.8
         
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
      - name: Build with Gradle
        env: 
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }} 
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          RELEASE_API_URL: ${{ secrets.DEBUG_API_URL }}
          DEBUG_API_URL: ${{ secrets.DEBUG_API_URL }}
        run: |
          echo -e "android.enableJetifier=true\nandroid.useAndroidX=true\nandroid.enableBuildCache=true\nkotlin.code.style=official\nkotlin.incremental=true\norg.gradle.configureondemand=true\norg.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.caching=true" > gradle.properties
          echo "RELEASE_STORE_FILE=$RELEASE_STORE_FILE" >> gradle.properties
          echo "RELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD" >> gradle.properties
          echo "RELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS" >> gradle.properties
          echo "RELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" >> gradle.properties
          echo "RELEASE_API_URL=$RELEASE_API_URL" >> gradle.properties
          echo "STAGING_API_URL=$STAGING_API_URL" >> gradle.properties
          echo "DEBUG_API_URL=$DEBUG_API_URL" >> gradle.properties
          ./gradlew assembleDebug
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
  
